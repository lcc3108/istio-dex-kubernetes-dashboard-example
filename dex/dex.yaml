apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
spec:
  selector:
    matchLabels:
      app: dex
  replicas: 1
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex # This is created below
      containers:
        - image: quay.io/dexidp/dex:v2.26.0
          name: dex
          command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]
          ports:
            - name: http
              containerPort: 5556
          volumeMounts:
            - name: config
              mountPath: /etc/dex/cfg
          # env:
          # - name: GITHUB_CLIENT_ID
          #   valueFrom:
          #     secretKeyRef:
          #       name: github-client
          #       key: client-id
          # - name: GITHUB_CLIENT_SECRET
          #   valueFrom:
          #     secretKeyRef:
          #       name: github-client
          #       key: client-secret
          readinessProbe:
          httpGet:
            path: /healthz
            port: 5556
      volumes:
        - name: config
          configMap:
            name: dex
            items:
              - key: config.yaml
                path: config.yaml
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: dex
data:
  config.yaml: |
    issuer: https://dex.example.com
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      http: 0.0.0.0:5556
    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: YOUR_CLIENT_KEY
        clientSecret: YOUR_SECRET_KEY
        redirectURI: https://dex.example.com/callback
        orgs:
        - name: blackcowmoo
    oauth2:
      skipApprovalScreen: true
    staticClients:
    - id: dashboard
      redirectURIs:
      - 'https://dashboard.example.com/oauth2/callback'
      name: 'k8s-dashboard'
      secret: dashboard
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
spec:
  type: ClusterIP
  ports:
    - name: dex
      port: 5556
      protocol: TCP
      targetPort: 5556
  selector:
    app: dex
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
  namespace: dex
rules:
  - apiGroups: ["dex.coreos.com"] # API group created by dex
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
  namespace: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
  - kind: ServiceAccount
    name: dex # Service account assigned to the dex pod, created above
    namespace: default # The namespace dex is running in
